// # Place all the behaviors and hooks related to the matching controller here.
// # All this logic will automatically be available in application.js.
// # You can use CoffeeScript in this file: http://coffeescript.org/


var repl;
var TOKEN;
var myselect = "ruby";
var startToken = function(lang){
  $(".out").empty();
  $.ajax({
    url: '/gen_token',
    success: function(data){
      TOKEN = {time_created: data.time_created, msg_mac: data.msg_mac};
      main(TOKEN, lang);
    }
  });
}

var main = function(token, lang){
  repl = new ReplitClient('api.repl.it', '80', lang, TOKEN);
  repl.connect().then(
    function() {
      document.querySelector('.status').innerHTML = 'connected';
      start(repl);
    },
    function() {
      document.querySelector('.status').innerHTML = 'failed';
    }
  );


}
var fire_text = "";
var firepad;
var init = function(lang) {
  //// Initialize Firebase.
  var firepadRef = getRef();
  var editor = ace.edit("firepad-container");
  editor.setTheme("ace/theme/textmate");
  var session = editor.getSession();
  session.setUseWrapMode(true);
  session.setUseWorker(false);
  session.setMode('ace/mode/' + lang);
  firepad = Firepad.fromACE(firepadRef, editor)
  execute(firepad, lang)
}
var execute = function(firepad, lang){
  firepad.on("ready", function(){
    if(lang === "java"){
      firepad.setText('class Main{public static void main(String[] args){System.out.println("hello world");}}');
    }else if(lang === "ruby"){
      firepad.setText("#This is Ruby")
    }
  })
};

var getRef = function() {
  // var ref = new Firebase('https://firepad.firebaseio-demo.com');
  var ref = new Firebase('https://firepadcollap.firebaseio.com/firepad');
  var hash = window.location.hash.replace(/#/g, '');
  if (hash) {
    ref = ref.child(hash);
  } else {
    ref = ref.push(); // generate unique location.
    window.location = window.location + '#' + ref.key(); // add it as a hash to the URL.
  }
  if (typeof console !== 'undefined')
  // console.log('Firebase data: ', ref.toString());
  return ref;

}
function start(repl) {

  $( "#runcode" ).on('click', function() {
    $(".out").empty();
    // document.querySelector('.out').innerHTML = "";

    fire_text = firepad.getText();
    console.log(fire_text);
    repl.evaluate(
      fire_text,
      {
        stdout: function(str) {
          document.querySelector('.out').innerHTML += str;
        }
      }
    ).then(
      function(result) {
        // document.querySelector('.result').innerHTML += (result.error || result.data) + '\n';
      },
      function(err) {
        console.error(err);
      }
    );
  });
}




$(document).on('turbolinks:load', function(){
  startToken(myselect);
  // jsFunction returns the language to run the code in :)
  init(myselect);

  $("#java").on("click", function(){
      myselect = "java";

  })
  $("#ruby").on("click", function(){
    myselect = "ruby";

  })

});
$(document).on('change', function(){
  startToken(jsFunction());
  init(jsFunction());

})
