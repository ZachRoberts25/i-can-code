
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
var rubyProgram = '#If we recreate a black jack game, we can then install our own\n#methods of how we play and from there can configure a percentage\n#that we can win :)\nmodule PlayersDealers\n\n  def get_hand(card1, card2)\n\t@first_card = card1\n\t@second_card = card2\n\t@cards_in_hand = []\n\t@cards_in_hand << @first_card\n\t@cards_in_hand << @second_card\n\tself.total\n  end\n  def calc_total\n\t@total = 0\n\tself.cards_in_hand.each{|card| @total += card.value}\n\tif @total > 21\n\t  self.cards_in_hand.each do |card|\n\t\t# p self.name, card\n\t\tif card.rank == "A"\n\t\t  card.rank = "A1"\n\t\t  card.value = 1\n\t\t  @total = 0\n\t\t  self.cards_in_hand.each{|card| @total += card.value}\n\t\t  break\n\t\tend\n\t  end\n\tend\n  end\n  def show_hand\n\tself.cards_in_hand.each do |card|\n\t  # puts "#{self.name} has a #{card.rank + card.suit}"\n\tend\n\n  end\n  def bust?(player)\n\tplayer.total > 21\n  end\nend\n\nclass Card\n  attr_accessor :rank, :value, :suit, :deck_of_cards\n  def initialize(rank, suit)\n\t@rank = rank\n\t@suit = suit\n\t@value = value\n  end\n\n  def value\n\tPlayer.show_players.each do |player|\n\t  return 11 if @rank == "A"\n\t  return 10 if @rank == "K" || @rank == "Q" || @rank == "J" || @rank == "10"\n\t  return 1 if @rank == "A1"\n\t  #for 2 though 9 if it equals its self then return that\n\t  i = 2\n\t  while i < 10 do\n\t\treturn i if @rank == "#{i}"\n\t\ti += 1\n\t  end\n\tend\n  end\nend\nclass Deck_of_cards\n  attr_accessor :deck_of_cards, :array\n  def initialize\n\t@array = []\n\tsuits = %w{Spades Hearts Diamonds Clubs}\n\tranks = %w{A K Q J 10 9 8 7 6 5 4 3 2}\n\tranks.size.times do |i|\n\t  suits.each do |suit|\n\t\t@array << Card.new(ranks[i] , suit)\n\t\t@array\n\t  end\n\tend\n  end\nend\nclass Player\n  include PlayersDealers\n  attr_accessor :name, :amount_of_money, :cards_in_hand, :total, :bet_amount\n  @@players = []\n  def initialize(name, amount_of_money)\n\t@name = name\n\t@amount_of_money = amount_of_money\n\t@@players << self\n  end\n  # #array for each player of all cards in their hand\n  # def split\n  #\n  # end\n  # def double_down(dealer)\n  #   self.hit(dealer)\n  #   self.bet_amount += self.bet_amount\n  #\n  # end\n\n  def self.show_players\n\t@@players\n  end\n  def hit(dealer)\n\tself.cards_in_hand << dealer.deal_card\n\tself.calc_total\n  end\n\n  def bet(bet_amount)\n\t@bet_amount = bet_amount\n\t@amount_of_money -= @bet_amount\n  end\n  def win\n\t@amount_of_money += (2 * @bet_amount)\n  end\n  def win?(dealer)\n\tif dealer.total == total\n\t  "tie"\n\telsif self.total > 21\n\t  false\n\telsif dealer.total > 21 || total > dealer.total\n\t  true\n\telsif dealer.total > total\n\t  false\n\telse\n\t  "error"\n\tend\n  end\n  def lose\n\t@amount_of_money\n  end\n  def push?(dealer)\n\tself.total == dealer.total\n  end\nend\n\n\nclass Dealer\n  include PlayersDealers\n  attr_accessor :name, :first_card, :second_card, :cards_in_hand, :total\n  def initialize(deck_of_cards, name)\n\t@deck_of_cards = deck_of_cards\n\t@name = name\n  end\n  def hit\n\tself.cards_in_hand << self.deal_card\n\tself.calc_total\n  end\n  def deal_cards\n\t@deck_of_cards.shuffle!\n\tPlayer.show_players.each do |player|\n\t  player.get_hand(deal_card, deal_card)\n\tend\n\tself.get_hand(deal_card, deal_card)\n  end\n  def deal_card\n\t@deck_of_cards.pop\n  end\nend\n\nclass World\n  @@statistics = Hash.new(0)\n\n  attr_accessor :dealer, :response, :total\n  def initialize\n\t# puts "How many players want to play blackjack?"\n\t# number = gets.chomp.to_i\n\t# number.times {\n\t#   puts "player name?"\n\t#   player_name = gets.chomp\n\t#   puts "How much money does #{player_name} have?"\n\t#   start_amount = gets.chomp.to_i\n\t#   Player.new(player_name, start_amount)\n\t# }\n\tnew_deck = Deck_of_cards.new.array\n\t@dealer = Dealer.new(new_deck, "dealer")\n\n  end\n  def self.stats\n\t@@statistics\n  end\n  def deal\n\t@dealer.deal_cards\n\t@dealer.total\n\t# Player.show_players.each {|player| player.show_hand}\n\t# puts "#{@dealer.name} has #{@dealer.first_card.rank} of #{@dealer.first_card.suit}"\n  end\n  # def prompt_to_hit(player)\n  #   puts "#{player.name} you total is #{player.total}, do you (H)it or (S)tay?"\n  #   @response = gets.chomp.downcase\n  # end\n  # def update_player_on_hand(player)\n  #   puts "#{player.name} your total is #{player.total} and your cards are #{player.cards_in_hand}"\n  # end\n\n  def hit_or_stay\n\t#creating an method that should play like me :)\n\t#All possibilities, Dealer can have 2-11, I can have 4-22\n\n\tPlayer.show_players.each do |player|\n\t  # This gets rid of anytime I have 18, 19, 20, 21, or 22 so we gucci\n\t  player.calc_total\n\t  while player.total < 17\n\t\t#always hit if I have under 10, no possible bust here\n\t\tif player.total < 11\n\t\t  player.hit(@dealer)\n\t\tend\n\t\t#I have between 11 and 16, and the dealer is showing 7-11 then hit\n\t\tif (player.total > 10 && player.total < 17) && (@dealer.first_card.value < 12 && @dealer.first_card.value > 6)\n\t\t  player.hit(@dealer)\n\t\tend\n\t\t#I have 11-15, when dealer is showing 2-6\n\t\tbreak  if (player.total > 10 && player.total < 17) && (@dealer.first_card.value < 7 && @dealer.first_card.value > 1)\n\n\t  end\n\tend\n  end\n\n\n\n\n#This is code to play a normal game of black jack\n#   Player.show_players.each do |player|\n#\t @response = "h"\n#\t @response == "h"\n#\t player.calc_total\n#\t @dealer.calc_total\n#\t while player.total < 21\n#\t   prompt_to_hit(player)\n#\t   if @response == "h"\n#\t\t player.hit(@dealer)\n#\t\t update_player_on_hand(player)\n#\t   elsif @response == "s"\n#\t\t update_player_on_hand(player)\n#\t\t break\n#\t   elsif @resonse == "d"\n#\t\t player.double_down\n#\t\t update_player_on_hand\n#\t\t break\n#\t   end\n#\t end\n#   end\n# end\ndef dealer_hit\n  # puts "Dealer has #{@dealer.total}"\n  @dealer.calc_total\n  until @dealer.total > 16 do\n\t@dealer.hit\n  end\n  # puts "Dealer has #{@dealer.total}"\nend\ndef show_total_dealer\n  # puts "#{@dealer.name} has a total of #{@dealer.total}"\nend\ndef determine_winners\n  Player.show_players.each do |player|\n\toutcome = case player.win? @dealer\n\twhen "tie" then :ties\n\twhen "error" then :errors\n\twhen true then :wins\n\twhen false then :losses\n\tend\n\t@@statistics[outcome] += 1\n  end\n  @@statistics[:games] += 1\nend\nend\n\nzach = Player.new("zach", 5000)\n\n# Player.new("craig", 5000).bet(5000)\n# Player.new("austin", 5000).bet(5000)\n# game1 = World.new\n# game1.deal\n# zach.show_hand\n# game1.hit_or_stay\n# zach.show_hand\n# game1.dealer_hit\n\n\n100000.times do\n  game1 = World.new\n  game1.deal\n  game1.hit_or_stay\n  game1.dealer_hit\n  game1.determine_winners\nend\nputs "Percent of wins = #{World.stats[:wins].to_f/World.stats[:games] * 100}%"\nputs "Percent of ties = #{World.stats[:ties].to_f/World.stats[:games] * 100}%"\nputs "Percent of losses = #{World.stats[:losses].to_f/World.stats[:games] * 100}%"\nputs "Percent of errors = #{World.stats[:errors].to_f/World.stats[:games] * 100}%"'
